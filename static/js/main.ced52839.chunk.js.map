{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAY,iBAAjB,UACP,qBAAKC,IAAG,+BAA4BF,EAAMG,QAAQC,GAA1C,0BAAsEC,IAAM,YACpF,mCAA+BL,EAAMG,QAAQG,KAA7C,MAAWN,EAAMG,QAAQC,IACzB,4BAAIJ,EAAMG,QAAQI,YCHTC,EAAW,SAACR,GAErB,OAAQ,qBAAKC,UAAY,YAAjB,SAEID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAG,cAAC,EAAD,CAA0BA,QAAWA,GAAvBA,EAAQC,UCLtDO,G,MAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACpC,OAAS,uBAAOZ,UAAU,SAASa,KAAO,SAASC,YAAaH,EAAaI,SAAYH,MCiC9EI,E,kDA/Bb,aAAc,IAAD,8BACX,gBAUFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAVtC,EAAKC,MAAQ,CACXd,SAAW,GACXW,YAAc,IAJL,E,qDAOb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,oBAO5H,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK/B,UAAU,MAAf,UACA,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CACEW,YAAc,iBACdC,aAAgBgB,KAAKhB,eAEvB,cAAC,EAAD,CAAUJ,SAAYqB,W,GA1BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAQ1BZ,M","file":"static/js/main.ced52839.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.styles.css\";\r\n\r\n\r\nexport const Card = (props) => {\r\n    return <div className = \"card-container\">\r\n    <img src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt = \"monster\"/>\r\n    <h2 key = {props.monster.id}> {props.monster.name} </h2>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport {Card} from '../card/card.component' \r\n\r\n\r\nexport const CardList = (props) => {\r\n    //console.log(props)\r\n    return (<div className = \"card-list\">\r\n                {\r\n                props.monsters.map(monster=>(<Card key  = {monster.id} monster = {monster}/>))\r\n                } \r\n            </div>);\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeHolder, handleChange})=>{\r\n    return ( <input className='search' type = \"search\" placeholder={placeHolder} onChange = {handleChange}/>)\r\n}\r\n//{ e=> {this.setState({searchField : e.target.value});}}","import React , {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component.jsx\";\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField : \"\"\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users => this.setState({monsters:users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value});\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1 className='title'>Monsters Rolodex</h1>\n      <SearchBox\n        placeHolder = 'search monster'\n        handleChange = {this.handleChange}\n      />\n      <CardList monsters = {filteredMonsters}/>   \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}